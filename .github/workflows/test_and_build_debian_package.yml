name: Test and Build Debian Package

# Trigger workflow on pull requests for any branch and on pushes to the main branch
on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - 'main'

jobs:
  test:
    # Define the environment for the test job
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Step 2: Set up the Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Step 3: Install setuptools
      - name: Install setuptools
        run: |
          python -m pip install --upgrade pip
          pip install setuptools

      # Step 4: Extract the version from setup.py and save it as an environment variable
      - name: Extract version from setup.py
        id: get_version
        run: |
          # Retrieve the version from setup.py
          version=$(python setup.py --version)
          echo "Package version: $version"
          echo "version=$version" >> $GITHUB_ENV

      # Step 5: Check if the version has changed
      - name: Check version change
        id: check_version
        run: |
          # Get the latest tag using GitHub API
          latest_tag=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/tags" | \
            jq -r '.[0].name')
          if [ -z "$latest_tag" ]; then
            echo "No tags found. Assuming version has changed."
            exit 0
          fi
          echo "Latest tag: $latest_tag"
          # Extract the version from the latest tag
          latest_version=${latest_tag#v}
          echo "Latest version: $latest_version"
          # Compare the current version with the latest version
          if [ "${{ env.version }}" == "$latest_version" ]; then
            echo "Version has not changed. Failing the workflow."
            exit 1
          else
            echo "Version has changed. Proceeding with the workflow."
          fi

      # Step 6: Install necessary dependencies for running tests
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      # Step 7: Run tests
      - name: Run unit tests
        run: |
          export PYTHONPATH="${{ github.workspace }}:${PYTHONPATH}"
          pytest tests/

  build:
    # Define the environment for the build job
    runs-on: ubuntu-latest
    needs: test  # Ensure build only runs after successful test completion
    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Step 2: Set up the Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Step 3: Install dependencies required for building the package
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel  # Install setuptools to use setup.py

      # Step 4: Extract the version from setup.py and save it as an environment variable
      - name: Extract version from setup.py
        id: get_version
        run: |
          # Retrieve the version from setup.py
          version=$(python setup.py --version)
          echo "Package version: $version"
          echo "version=$version" >> $GITHUB_ENV

      # Step 5: Configure Git user
      - name: Configure Git user
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      # Step 6: Create a tag based on the extracted version
      - name: Create tag
        run: |
          git tag -a "v${{ env.version }}" -m "Release v${{ env.version }}"
          git push origin "v${{ env.version }}"

      # Step 7: Build the Debian package with the extracted version
      - name: Build .deb package
        run: |
          mkdir -p debian_package/DEBIAN
          echo "Package: fastmodbuslibrary" > debian_package/DEBIAN/control
          echo "Version: ${{ env.version }}" >> debian_package/DEBIAN/control
          echo "Section: base" >> debian_package/DEBIAN/control
          echo "Priority: optional" >> debian_package/DEBIAN/control
          echo "Architecture: all" >> debian_package/DEBIAN/control
          echo "Maintainer: Aleksandr Degtyarev <adegtyarev.ap@gmail.com>" >> debian_package/DEBIAN/control
          echo "Description: Fast Modbus Python Library" >> debian_package/DEBIAN/control
          python setup.py install --root=debian_package/usr/local
          dpkg-deb --build debian_package

      # Step 8: Upload the Debian package as an artifact for later use
      - name: Upload Debian Package
        uses: actions/upload-artifact@v3
        with:
          name: debian-package
          path: debian_package.deb

      # Step 9: Upload the Debian package to GitHub Releases
      - name: Upload to GitHub Releases
        uses: softprops/action-gh-release@v1
        with:
          files: debian_package.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
