name: Build and Release

on:
  push:
    branches:
      - main  # Runs on merge to main branch

  pull_request:
    branches:
      - '*'  # Runs on pull requests to any branch except main
    paths-ignore:
      - 'main'

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Dependencies
      run: |
        # Install general and test dependencies
        pip install -r requirements.txt
        # Install test-specific dependencies if file exists
        if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi

    - name: Check Version in setup.py
      id: version_check
      run: |
        # Extract version from setup.py and store it for later steps
        version=$(python setup.py --version)
        echo "Version from setup.py is $version"
        echo "::set-output name=version::$version"

    - name: Run Tests
      run: |
        # Run tests using pytest
        pytest tests/

    - name: Build Debian Package
      run: |
        # Build the Debian package using the version from setup.py
        echo "Building Debian package version ${{ steps.version_check.outputs.version }}..."
        # Assuming the package will be named with the extracted version
        # dpkg-deb --build my_package/ debian_package_${{ steps.version_check.outputs.version }}.deb

  release:
    runs-on: ubuntu-latest
    needs: build-and-release  # Depends on successful build-and-release completion
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Runs only on merge to main branch

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Create Git Tag
      run: |
        # Configure Git and create a version tag
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a v${{ needs.build-and-release.outputs.version_check.version }} -m "Release version ${{ needs.build-and-release.outputs.version_check.version }}"
        git push origin v${{ needs.build-and-release.outputs.version_check.version }}

    - name: Release on GitHub
      uses: softprops/action-gh-release@v1
      with:
        # Upload the Debian package to GitHub Release
        files: debian_package_${{ needs.build-and-release.outputs.version_check.version }}.deb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
