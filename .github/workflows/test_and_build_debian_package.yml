name: Build and Release

on:
  push:
    branches:
      - main  # Запускается при пуше в ветку main

  pull_request:
    branches:
      - '*'  # Запускается при создании pull request в любую ветку

jobs:
  # Job 1: Version Check
  version-check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Core Dependencies
      run: |
        # Установка необходимых зависимостей для setup.py
        pip install setuptools wheel

    - name: Check Version in setup.py
      id: version_check
      run: |
        # Извлечение версии из setup.py и сохранение для последующих шагов
        version=$(python setup.py --version)
        echo "Version from setup.py is $version"
        echo "::set-output name=version::$version"

  # Job 2: Run Tests
  tests:
    runs-on: ubuntu-latest
    needs: version-check  # Зависимость от успешного завершения version-check

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Dependencies
      run: |
        # Установка зависимостей для тестов, включая pytest
        pip install -r requirements.txt
        pip install pytest  # Установка pytest явно
        # Установка тестовых зависимостей, если файл существует
        if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi

    - name: Install Package
      run: |
        # Установка пакета в режиме разработки
        pip install -e .

    - name: Run Tests
      run: |
        # Запуск тестов с использованием pytest
        pytest tests/

  # Job 3: Build Debian Package
  build-package:
    runs-on: ubuntu-latest
    needs: tests  # Зависимость от успешного завершения tests

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Core Dependencies
      run: |
        # Установка необходимых зависимостей для сборки пакета
        pip install setuptools wheel

    - name: Build Debian Package
      run: |
        # Сборка Debian пакета с использованием версии из setup.py
        version=$(python setup.py --version)
        echo "Building Debian package version $version..."
        # Предполагаем, что пакет будет называться debian_package_$version.deb
        # dpkg-deb --build my_package/ debian_package_${version}.deb
        # Сохранение имени пакета для шага release
        echo "::set-output name=package_name::debian_package_${version}.deb"

  # Job 4: Release on GitHub
  release:
    runs-on: ubuntu-latest
    needs: build-package  # Зависимость от успешного завершения build-package

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Create Git Tag
      id: create_tag
      run: |
        # Определение уникального тега для pull request и основной ветки
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          version="${{ needs.version-check.outputs.version }}-PR${{ github.event.pull_request.number }}"
        else
          version="v${{ needs.version-check.outputs.version }}"
        fi
        # Удаление лишних пробелов в переменной version
        version=$(echo "$version" | tr -d '[:space:]')
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "$version" -m "Release $version"
        git push origin "$version" --force

    - name: Release on GitHub
      uses: softprops/action-gh-release@v1
      with:
        # Загрузка Debian пакета в релиз GitHub
        files: debian_package_${{ needs.build-package.outputs.package_name }}
        tag_name: ${{ steps.create_tag.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
