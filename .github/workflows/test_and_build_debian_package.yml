name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      current_version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get current version from setup.py
        id: get_version
        run: |
          VERSION=$(python -c "import re; f = open('setup.py').read(); print(re.search(r'version\\s*=\\s*[\"\\\']([0-9.]+)[\"\\\']', f).group(1))")
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Check version against main
        run: |
          git fetch origin main
          MAIN_VERSION=$(git show origin/main:setup.py | python -c "import re, sys; f = sys.stdin.read(); print(re.search(r'version\\s*=\\s*[\"\\\']([0-9.]+)[\"\\\']', f).group(1))")
          if [ "$VERSION" == "$MAIN_VERSION" ]; then
            echo "Version has not changed. Failing job."
            exit 1
          fi
          echo "Version has changed. Proceeding."

  test:
    runs-on: ubuntu-latest
    needs: check-version

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Dependencies
      run: |
        pip install setuptools wheel
        pip install -r requirements.txt
        pip install pytest

    - name: Install Package in Editable Mode
      run: |
        # Install the package in editable mode to make modules accessible
        pip install -e .

    - name: Run Tests
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: pytest tests/

  release:
    runs-on: ubuntu-latest
    needs: [check-version, test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Get Current Version for Release
      run: echo "Current version for release: ${{ env.version }}"

    - name: Build Package
      run: |
        python setup.py sdist bdist_wheel
        echo "Package built successfully."

    - name: Upload Release
      env:
        RELEASE_VERSION: ${{ env.version }}
      run: |
        echo "Uploading version $RELEASE_VERSION to release system"
        # Add actual upload command here
